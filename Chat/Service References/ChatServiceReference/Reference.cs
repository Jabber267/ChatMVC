//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:4.0.30319.42000
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace Chat.ChatServiceReference {
    using System.Runtime.Serialization;
    using System;
    
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="MessageBoard", Namespace="http://schemas.datacontract.org/2004/07/ChatService")]
    [System.SerializableAttribute()]
    public partial class MessageBoard : object, System.Runtime.Serialization.IExtensibleDataObject, System.ComponentModel.INotifyPropertyChanged {
        
        [System.NonSerializedAttribute()]
        private System.Runtime.Serialization.ExtensionDataObject extensionDataField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private System.DateTime DateTimeOfMessageField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string MessageField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private int RIDField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string UsernameField;
        
        [global::System.ComponentModel.BrowsableAttribute(false)]
        public System.Runtime.Serialization.ExtensionDataObject ExtensionData {
            get {
                return this.extensionDataField;
            }
            set {
                this.extensionDataField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public System.DateTime DateTimeOfMessage {
            get {
                return this.DateTimeOfMessageField;
            }
            set {
                if ((this.DateTimeOfMessageField.Equals(value) != true)) {
                    this.DateTimeOfMessageField = value;
                    this.RaisePropertyChanged("DateTimeOfMessage");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string Message {
            get {
                return this.MessageField;
            }
            set {
                if ((object.ReferenceEquals(this.MessageField, value) != true)) {
                    this.MessageField = value;
                    this.RaisePropertyChanged("Message");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public int RID {
            get {
                return this.RIDField;
            }
            set {
                if ((this.RIDField.Equals(value) != true)) {
                    this.RIDField = value;
                    this.RaisePropertyChanged("RID");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string Username {
            get {
                return this.UsernameField;
            }
            set {
                if ((object.ReferenceEquals(this.UsernameField, value) != true)) {
                    this.UsernameField = value;
                    this.RaisePropertyChanged("Username");
                }
            }
        }
        
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
        
        protected void RaisePropertyChanged(string propertyName) {
            System.ComponentModel.PropertyChangedEventHandler propertyChanged = this.PropertyChanged;
            if ((propertyChanged != null)) {
                propertyChanged(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
            }
        }
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    [System.ServiceModel.ServiceContractAttribute(ConfigurationName="ChatServiceReference.IService")]
    public interface IService {
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService/InsertChatMessage", ReplyAction="http://tempuri.org/IService/InsertChatMessageResponse")]
        string InsertChatMessage(string username, string message, System.DateTime dateTimeOfMessage);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService/InsertChatMessage", ReplyAction="http://tempuri.org/IService/InsertChatMessageResponse")]
        System.Threading.Tasks.Task<string> InsertChatMessageAsync(string username, string message, System.DateTime dateTimeOfMessage);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService/GetMessageBoard", ReplyAction="http://tempuri.org/IService/GetMessageBoardResponse")]
        Chat.ChatServiceReference.MessageBoard[] GetMessageBoard();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService/GetMessageBoard", ReplyAction="http://tempuri.org/IService/GetMessageBoardResponse")]
        System.Threading.Tasks.Task<Chat.ChatServiceReference.MessageBoard[]> GetMessageBoardAsync();
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public interface IServiceChannel : Chat.ChatServiceReference.IService, System.ServiceModel.IClientChannel {
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class ServiceClient : System.ServiceModel.ClientBase<Chat.ChatServiceReference.IService>, Chat.ChatServiceReference.IService {
        
        public ServiceClient() {
        }
        
        public ServiceClient(string endpointConfigurationName) : 
                base(endpointConfigurationName) {
        }
        
        public ServiceClient(string endpointConfigurationName, string remoteAddress) : 
                base(endpointConfigurationName, remoteAddress) {
        }
        
        public ServiceClient(string endpointConfigurationName, System.ServiceModel.EndpointAddress remoteAddress) : 
                base(endpointConfigurationName, remoteAddress) {
        }
        
        public ServiceClient(System.ServiceModel.Channels.Binding binding, System.ServiceModel.EndpointAddress remoteAddress) : 
                base(binding, remoteAddress) {
        }
        
        public string InsertChatMessage(string username, string message, System.DateTime dateTimeOfMessage) {
            return base.Channel.InsertChatMessage(username, message, dateTimeOfMessage);
        }
        
        public System.Threading.Tasks.Task<string> InsertChatMessageAsync(string username, string message, System.DateTime dateTimeOfMessage) {
            return base.Channel.InsertChatMessageAsync(username, message, dateTimeOfMessage);
        }
        
        public Chat.ChatServiceReference.MessageBoard[] GetMessageBoard() {
            return base.Channel.GetMessageBoard();
        }
        
        public System.Threading.Tasks.Task<Chat.ChatServiceReference.MessageBoard[]> GetMessageBoardAsync() {
            return base.Channel.GetMessageBoardAsync();
        }
    }
}
